name: Generate Posts

on:
  push:
    branches: [main]
    paths:
      - "pages/**"
  pull_request:
    branches: [main]
    paths:
      - "pages/**"
  workflow_dispatch: # 수동 실행 가능

jobs:
  generate-posts:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate posts.json
      run: |
        echo "📚 게시글 메타데이터 생성 중..."
        
        # posts.json 초기화
        echo '{"posts":[]}' > posts.json
        
        # pages 폴더 확인
        if [ ! -d "pages" ]; then
          echo "⚠️ pages 폴더가 존재하지 않습니다."
          exit 0
        fi
        
        # 마크다운 파일 개수 확인
        md_files=$(find pages -name "*.md" | wc -l)
        echo "📄 $md_files개의 마크다운 파일 발견"
        
        if [ $md_files -eq 0 ]; then
          echo "⚠️ 마크다운 파일이 없습니다."
          exit 0
        fi
        
        # posts.json 생성 스크립트 작성
        cat > generate_posts.js << 'EOF'
        const fs = require('fs');
        const path = require('path');
        
        function parseFrontMatter(content) {
          const frontMatterRegex = /^---\s*\n([\s\S]*?)\n---\s*\n([\s\S]*)$/;
          const match = content.match(frontMatterRegex);
          
          if (!match) {
            return { frontMatter: {}, body: content };
          }
          
          const frontMatterText = match[1];
          const body = match[2];
          const frontMatter = {};
          
          const lines = frontMatterText.split('\n');
          for (const line of lines) {
            const trimmedLine = line.trim();
            if (!trimmedLine || trimmedLine.startsWith('#')) continue;
            
            const colonIndex = trimmedLine.indexOf(':');
            if (colonIndex === -1) continue;
            
            const key = trimmedLine.substring(0, colonIndex).trim();
            let value = trimmedLine.substring(colonIndex + 1).trim();
            
            // 따옴표 제거
            if ((value.startsWith('"') && value.endsWith('"')) || 
                (value.startsWith("'") && value.endsWith("'"))) {
              value = value.slice(1, -1);
            }
            
            // 배열 파싱
            if (value.startsWith('[') && value.endsWith(']')) {
              const arrayContent = value.slice(1, -1);
              frontMatter[key] = arrayContent.split(',').map(item => 
                item.trim().replace(/^['"]|['"]$/g, '')
              );
            } else {
              frontMatter[key] = value;
            }
          }
          
          return { frontMatter, body };
        }
        
        function generatePosts() {
          const posts = [];
          const pagesDir = 'pages';
          
          try {
            const files = fs.readdirSync(pagesDir).filter(file => file.endsWith('.md'));
            
            console.log(`📄 ${files.length}개의 마크다운 파일 처리 중...`);
            
            files.forEach(file => {
              try {
                const filePath = path.join(pagesDir, file);
                const content = fs.readFileSync(filePath, 'utf8');
                
                const { frontMatter, body } = parseFrontMatter(content);
                
                const post = {
                  file: file,
                  title: frontMatter.title || '제목 없음',
                  date: frontMatter.date || new Date().toISOString().split('T')[0],
                  description: frontMatter.description || '',
                  tags: frontMatter.tags || [],
                  category: frontMatter.category || '',
                  content: body.substring(0, 200).replace(/\n/g, ' ') + '...'
                };
                
                posts.push(post);
                console.log(`✅ ${file} 처리 완료`);
              } catch (error) {
                console.error(`❌ ${file} 처리 실패:`, error.message);
              }
            });
            
            // 날짜 기준 내림차순 정렬
            posts.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            // posts.json 생성
            const result = { posts: posts };
            fs.writeFileSync('posts.json', JSON.stringify(result, null, 2));
            
            console.log(`🎉 posts.json 생성 완료: ${posts.length}개 게시글`);
          } catch (error) {
            console.error('❌ posts.json 생성 실패:', error.message);
            process.exit(1);
          }
        }
        
        generatePosts();
        EOF
        
        # Node.js 스크립트 실행
        node generate_posts.js
        
    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -f posts.json ]; then
          if git diff --quiet posts.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "📝 posts.json에 변경사항이 없습니다."
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "📝 posts.json이 업데이트되었습니다."
          fi
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "❌ posts.json 파일이 생성되지 않았습니다."
        fi
        
    - name: Commit and push changes
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add posts.json
        git commit -m "🤖 posts.json 자동 업데이트 [skip ci]"
        git push
        
    - name: Upload posts.json as artifact
      uses: actions/upload-artifact@v4
      with:
        name: posts-json
        path: posts.json
        retention-days: 30